var _user$project$Main$encodeMember = function (member) {
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'id',
				_1: _elm_lang$core$Json_Encode$int(member.idd)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'name',
					_1: _elm_lang$core$Json_Encode$string(member.name)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'email',
						_1: _elm_lang$core$Json_Encode$string(member.email)
					},
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$Main$memberJsonBody = function (member) {
	return _elm_lang$http$Http$jsonBody(
		_user$project$Main$encodeMember(member));
};
var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$none;
};
var _user$project$Main$url = function (action) {
	return A2(_elm_lang$core$Basics_ops['++'], 'http://localhost:9000/member/', action);
};
var _user$project$Main$Model = F4(
	function (a, b, c, d) {
		return {count: a, message: b, member: c, number: d};
	});
var _user$project$Main$Member = F3(
	function (a, b, c) {
		return {idd: a, name: b, email: c};
	});
var _user$project$Main$start = {
	ctor: '_Tuple2',
	_0: A4(
		_user$project$Main$Model,
		0,
		'No message',
		A3(_user$project$Main$Member, 0, 'peter', 'mail'),
		0),
	_1: _elm_lang$core$Platform_Cmd$none
};
var _user$project$Main$decodeMember = A4(
	_elm_lang$core$Json_Decode$map3,
	_user$project$Main$Member,
	A2(_elm_lang$core$Json_Decode$field, 'id', _elm_lang$core$Json_Decode$int),
	A2(_elm_lang$core$Json_Decode$field, 'name', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode$field, 'email', _elm_lang$core$Json_Decode$string));
var _user$project$Main$MemberPosted = function (a) {
	return {ctor: 'MemberPosted', _0: a};
};
var _user$project$Main$postMember = function (member) {
	return A2(
		_elm_lang$http$Http$send,
		_user$project$Main$MemberPosted,
		A3(
			_elm_lang$http$Http$post,
			_user$project$Main$url(''),
			_user$project$Main$memberJsonBody(member),
			_user$project$Main$decodeMember));
};
var _user$project$Main$PostMember = {ctor: 'PostMember'};
var _user$project$Main$Email = function (a) {
	return {ctor: 'Email', _0: a};
};
var _user$project$Main$Name = function (a) {
	return {ctor: 'Name', _0: a};
};
var _user$project$Main$ID = function (a) {
	return {ctor: 'ID', _0: a};
};
var _user$project$Main$MemberRecieved = function (a) {
	return {ctor: 'MemberRecieved', _0: a};
};
var _user$project$Main$getMember = function (id) {
	return A2(
		_elm_lang$http$Http$send,
		_user$project$Main$MemberRecieved,
		A2(
			_elm_lang$http$Http$get,
			_user$project$Main$url(
				_elm_lang$core$Basics$toString(id)),
			_user$project$Main$decodeMember));
};
var _user$project$Main$GetMember = {ctor: 'GetMember'};
var _user$project$Main$MemberCountReceived = function (a) {
	return {ctor: 'MemberCountReceived', _0: a};
};
var _user$project$Main$getMemberCount = A2(
	_elm_lang$http$Http$send,
	_user$project$Main$MemberCountReceived,
	A2(
		_elm_lang$http$Http$get,
		_user$project$Main$url('count'),
		_elm_lang$core$Json_Decode$int));
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'GetMemberCount':
				return {ctor: '_Tuple2', _0: model, _1: _user$project$Main$getMemberCount};
			case 'MemberCountReceived':
				if (_p0._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{count: _p0._0._0}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								message: _elm_lang$core$Basics$toString(_p0._0._0)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'GetMember':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$Main$getMember(model.member.idd)
				};
			case 'MemberRecieved':
				if (_p0._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{member: _p0._0._0}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								message: _elm_lang$core$Basics$toString(_p0._0._0)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'ID':
				var _p1 = _elm_lang$core$String$toInt(_p0._0);
				if (_p1.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								member: A3(_user$project$Main$Member, _p1._0, model.member.name, model.member.email)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								member: A3(_user$project$Main$Member, 0, model.member.name, model.member.email),
								message: 'FAIL'
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'Name':
				var member = model.member;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							member: _elm_lang$core$Native_Utils.update(
								member,
								{name: _p0._0})
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Email':
				var member = model.member;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							member: _elm_lang$core$Native_Utils.update(
								member,
								{email: _p0._0})
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'PostMember':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$Main$postMember(model.member)
				};
			default:
				if (_p0._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{member: _p0._0._0}),
						_1: _user$project$Main$getMemberCount
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								message: _elm_lang$core$Basics$toString(_p0._0._0)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
		}
	});
var _user$project$Main$GetMemberCount = {ctor: 'GetMemberCount'};
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h2,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(
						A2(
							_elm_lang$core$Basics_ops['++'],
							'Member Count = ',
							_elm_lang$core$Basics$toString(model.count))),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$button,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onClick(_user$project$Main$GetMemberCount),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Update Member Count'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$button,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(_user$project$Main$PostMember),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('save member'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$input,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$type_('text'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$value(
										_elm_lang$core$Basics$toString(model.member.idd)),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onInput(_user$project$Main$ID),
										_1: {ctor: '[]'}
									}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$input,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$type_('text'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$value(model.member.name),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Events$onInput(_user$project$Main$Name),
											_1: {ctor: '[]'}
										}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$input,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$type_('text'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$value(model.member.email),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Events$onInput(_user$project$Main$Email),
												_1: {ctor: '[]'}
											}
										}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$h2,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(
												A2(
													_elm_lang$core$Basics_ops['++'],
													_elm_lang$core$Basics$toString(model.member.idd),
													A2(
														_elm_lang$core$Basics_ops['++'],
														' ',
														A2(
															_elm_lang$core$Basics_ops['++'],
															_elm_lang$core$Basics$toString(model.member.name),
															A2(
																_elm_lang$core$Basics_ops['++'],
																' ',
																_elm_lang$core$Basics$toString(model.member.email)))))),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$hr,
											{ctor: '[]'},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html$text(model.message),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				}
			}
		});
};
var _user$project$Main$main = _elm_lang$html$Html$program(
	{init: _user$project$Main$start, view: _user$project$Main$view, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions})();
